{"ast":null,"code":"import _slicedToArray from \"/home/abdallah/Documents/React-apps/DashBoard-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"className\", \"classes\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { generateUtilityClasses } from '@mui/material';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { isEscapeKey } from '../../utils/keyboardUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var gridPanelClasses = generateUtilityClasses('MuiDataGrid', ['panel', 'paper']);\nvar GridPanelRoot = styled(Popper, {\n  name: 'MuiDataGrid',\n  slot: 'Panel',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.panel;\n  }\n})(function (_ref) {\n  var theme = _ref.theme;\n  return {\n    zIndex: theme.zIndex.modal\n  };\n});\nvar GridPaperRoot = styled(Paper, {\n  name: 'MuiDataGrid',\n  slot: 'Paper',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.paper;\n  }\n})(function (_ref2) {\n  var theme = _ref2.theme;\n  return {\n    backgroundColor: theme.palette.background.paper,\n    minWidth: 300,\n    maxHeight: 450,\n    display: 'flex'\n  };\n});\nvar GridPanel = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _apiRef$current$colum;\n\n  var children = props.children,\n      className = props.className,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var apiRef = useGridApiContext();\n  var classes = gridPanelClasses;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isPlaced = _React$useState2[0],\n      setIsPlaced = _React$useState2[1];\n\n  var handleClickAway = React.useCallback(function () {\n    apiRef.current.hidePreferences();\n  }, [apiRef]);\n  var handleKeyDown = React.useCallback(function (event) {\n    if (isEscapeKey(event.key)) {\n      apiRef.current.hidePreferences();\n    }\n  }, [apiRef]);\n  var modifiers = React.useMemo(function () {\n    return [{\n      name: 'flip',\n      enabled: false\n    }, {\n      name: 'isPlaced',\n      enabled: true,\n      phase: 'main',\n      fn: function fn() {\n        setIsPlaced(true);\n      },\n      effect: function effect() {\n        return function () {\n          setIsPlaced(false);\n        };\n      }\n    }];\n  }, []);\n  var anchorEl = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current;\n\n  if (!anchorEl) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(GridPanelRoot, _extends({\n    ref: ref,\n    placement: \"bottom-start\",\n    className: clsx(className, classes.panel),\n    anchorEl: anchorEl,\n    modifiers: modifiers\n  }, other, {\n    children: /*#__PURE__*/_jsx(ClickAwayListener, {\n      mouseEvent: \"onMouseUp\",\n      onClickAway: handleClickAway,\n      children: /*#__PURE__*/_jsx(GridPaperRoot, {\n        className: classes.paper,\n        elevation: 8,\n        onKeyDown: handleKeyDown,\n        children: isPlaced && children\n      })\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridPanel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\nexport { GridPanel };","map":null,"metadata":{},"sourceType":"module"}