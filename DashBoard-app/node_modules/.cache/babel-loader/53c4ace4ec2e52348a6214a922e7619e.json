{"ast":null,"code":"import _slicedToArray from \"/home/abdallah/Documents/React-apps/DashBoard-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"field\", \"colDef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridTabIndexColumnHeaderSelector } from '../../hooks/features/focus/gridFocusStateSelector';\nimport { gridSelectionStateSelector } from '../../hooks/features/selection/gridSelectionSelector';\nimport { isNavigationKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridVisibleSortedRowIdsSelector } from '../../hooks/features/filter/gridFilterSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../../hooks/features/pagination/gridPaginationSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nvar GridHeaderCheckbox = /*#__PURE__*/React.forwardRef(function GridHeaderCheckbox(props, ref) {\n  var _rootProps$components;\n\n  var other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var ownerState = {\n    classes: rootProps.classes\n  };\n  var classes = useUtilityClasses(ownerState);\n  var tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  var selection = useGridSelector(apiRef, gridSelectionStateSelector);\n  var visibleRowIds = useGridSelector(apiRef, gridVisibleSortedRowIdsSelector);\n  var paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);\n  var filteredSelection = React.useMemo(function () {\n    if (typeof rootProps.isRowSelectable !== 'function') {\n      return selection;\n    }\n\n    return selection.filter(function (id) {\n      // The row might have been deleted\n      if (!apiRef.current.getRow(id)) {\n        return false;\n      }\n\n      return rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n    });\n  }, [apiRef, rootProps.isRowSelectable, selection]); // All the rows that could be selected / unselected by toggling this checkbox\n\n  var selectionCandidates = React.useMemo(function () {\n    var rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds; // Convert to an object to make O(1) checking if a row exists or not\n    // TODO create selector that returns visibleRowIds/paginatedVisibleRowIds as an object\n\n    return rowIds.reduce(function (acc, id) {\n      acc[id] = true;\n      return acc;\n    }, {});\n  }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]); // Amount of rows selected and that are visible in the current page\n\n  var currentSelectionSize = React.useMemo(function () {\n    return filteredSelection.filter(function (id) {\n      return selectionCandidates[id];\n    }).length;\n  }, [filteredSelection, selectionCandidates]);\n  var isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;\n  var isChecked = currentSelectionSize > 0;\n\n  var handleChange = function handleChange(event) {\n    var params = {\n      value: event.target.checked\n    };\n    apiRef.current.publishEvent('headerSelectionCheckboxChange', params);\n  };\n\n  var tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;\n  React.useLayoutEffect(function () {\n    var element = apiRef.current.getColumnHeaderElement(props.field);\n\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [tabIndex, apiRef, props.field]);\n  var handleKeyDown = React.useCallback(function (event) {\n    if (event.key === ' ') {\n      // imperative toggle the checkbox because Space is disable by some preventDefault\n      apiRef.current.publishEvent('headerSelectionCheckboxChange', {\n        value: !isChecked\n      });\n    } // TODO v6 remove columnHeaderNavigationKeyDown events which are not used internally anymore\n\n\n    if (isNavigationKey(event.key) && !event.shiftKey) {\n      apiRef.current.publishEvent('columnHeaderNavigationKeyDown', props, event);\n    }\n  }, [apiRef, props, isChecked]);\n  var handleSelectionChange = React.useCallback(function () {\n    forceUpdate(function (p) {\n      return !p;\n    });\n  }, []);\n  React.useEffect(function () {\n    return apiRef.current.subscribeEvent('selectionChange', handleSelectionChange);\n  }, [apiRef, handleSelectionChange]);\n  var label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectAllRows' : 'checkboxSelectionSelectAllRows');\n  return /*#__PURE__*/_jsx(rootProps.components.BaseCheckbox, _extends({\n    ref: ref,\n    indeterminate: isIndeterminate,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    color: \"primary\",\n    inputProps: {\n      'aria-label': label\n    },\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridHeaderCheckbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The column of the current header component.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the column that triggered the event\n   */\n  field: PropTypes.string.isRequired\n} : void 0;\nexport { GridHeaderCheckbox };","map":null,"metadata":{},"sourceType":"module"}