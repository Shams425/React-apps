{"ast":null,"code":"import _classCallCheck from \"/home/abdallah/Documents/React-apps/DashBoard-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/abdallah/Documents/React-apps/DashBoard-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/abdallah/Documents/React-apps/DashBoard-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/abdallah/Documents/React-apps/DashBoard-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/abdallah/Documents/React-apps/DashBoard-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport * as React from 'react';\nexport var ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  _inherits(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary() {\n    _classCallCheck(this, ErrorBoundary);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ErrorBoundary).apply(this, arguments));\n  }\n\n  _createClass(ErrorBoundary, [{\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(error, errorInfo) {\n      if (this.props.api.current) {\n        this.logError(error); // Allows to trigger the Error event and all listener can run on Error\n\n        this.props.api.current.showError({\n          error: error,\n          errorInfo: errorInfo\n        });\n      }\n    }\n  }, {\n    key: \"logError\",\n    value: function logError(error, errorInfo) {\n      this.props.logger.error(\"An unexpected error occurred. Error: \".concat(error && error.message, \". \"), error, errorInfo);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state;\n\n      if (this.props.hasError || (_this$state = this.state) != null && _this$state.hasError) {\n        // You can render any custom fallback UI\n        return this.props.render(this.props.componentProps || this.state);\n      }\n\n      return this.props.children;\n    }\n  }], [{\n    key: \"getDerivedStateFromError\",\n    value: function getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return {\n        hasError: true,\n        error: error\n      };\n    }\n  }]);\n\n  return ErrorBoundary;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}